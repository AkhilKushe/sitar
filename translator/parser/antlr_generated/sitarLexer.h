/** \file
 *  This C header file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : /home/nehak/Projects/sitar/translator/grammar/sitar.g
 *     -                            On : 2017-04-30 16:08:14
 *     -                 for the lexer : sitarLexerLexer
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The lexer 
sitarLexer

has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 *
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef psitarLexer, which is returned from a call to sitarLexerNew().
 *
 * As this is a generated lexer, it is unlikely you will call it 'manually'. However
 * the methods are provided anyway.
 *
 * The methods in psitarLexer are  as follows:
 *
 *  - 
 void
      psitarLexer->AND(psitarLexer)
 *  - 
 void
      psitarLexer->BEGIN(psitarLexer)
 *  - 
 void
      psitarLexer->BEHAVIOR(psitarLexer)
 *  - 
 void
      psitarLexer->CAPACITY(psitarLexer)
 *  - 
 void
      psitarLexer->CODE(psitarLexer)
 *  - 
 void
      psitarLexer->COLON(psitarLexer)
 *  - 
 void
      psitarLexer->CONNECT_LEFT(psitarLexer)
 *  - 
 void
      psitarLexer->CONNECT_RIGHT(psitarLexer)
 *  - 
 void
      psitarLexer->DECL(psitarLexer)
 *  - 
 void
      psitarLexer->DO(psitarLexer)
 *  - 
 void
      psitarLexer->DOT(psitarLexer)
 *  - 
 void
      psitarLexer->ELSE(psitarLexer)
 *  - 
 void
      psitarLexer->END(psitarLexer)
 *  - 
 void
      psitarLexer->EQUALS(psitarLexer)
 *  - 
 void
      psitarLexer->EXPR(psitarLexer)
 *  - 
 void
      psitarLexer->FOR(psitarLexer)
 *  - 
 void
      psitarLexer->IF(psitarLexer)
 *  - 
 void
      psitarLexer->IN(psitarLexer)
 *  - 
 void
      psitarLexer->INCLUDE(psitarLexer)
 *  - 
 void
      psitarLexer->INIT(psitarLexer)
 *  - 
 void
      psitarLexer->INPORT(psitarLexer)
 *  - 
 void
      psitarLexer->INPORT_ARRAY(psitarLexer)
 *  - 
 void
      psitarLexer->KEYWORD_BOOL(psitarLexer)
 *  - 
 void
      psitarLexer->KEYWORD_CHAR(psitarLexer)
 *  - 
 void
      psitarLexer->KEYWORD_INT(psitarLexer)
 *  - 
 void
      psitarLexer->LOG(psitarLexer)
 *  - 
 void
      psitarLexer->MINUS(psitarLexer)
 *  - 
 void
      psitarLexer->MODULE(psitarLexer)
 *  - 
 void
      psitarLexer->NET(psitarLexer)
 *  - 
 void
      psitarLexer->NET_ARRAY(psitarLexer)
 *  - 
 void
      psitarLexer->NOT(psitarLexer)
 *  - 
 void
      psitarLexer->NOTHING(psitarLexer)
 *  - 
 void
      psitarLexer->OR(psitarLexer)
 *  - 
 void
      psitarLexer->OUTPORT(psitarLexer)
 *  - 
 void
      psitarLexer->OUTPORT_ARRAY(psitarLexer)
 *  - 
 void
      psitarLexer->PARAMETER(psitarLexer)
 *  - 
 void
      psitarLexer->PLUS(psitarLexer)
 *  - 
 void
      psitarLexer->POINTER(psitarLexer)
 *  - 
 void
      psitarLexer->PROCEDURE(psitarLexer)
 *  - 
 void
      psitarLexer->RUN(psitarLexer)
 *  - 
 void
      psitarLexer->SCOPE(psitarLexer)
 *  - 
 void
      psitarLexer->SEND(psitarLexer)
 *  - 
 void
      psitarLexer->SIMULATION(psitarLexer)
 *  - 
 void
      psitarLexer->STOP(psitarLexer)
 *  - 
 void
      psitarLexer->SUBMODULE(psitarLexer)
 *  - 
 void
      psitarLexer->SUBMODULE_ARRAY(psitarLexer)
 *  - 
 void
      psitarLexer->THEN(psitarLexer)
 *  - 
 void
      psitarLexer->THIS_CYCLE(psitarLexer)
 *  - 
 void
      psitarLexer->THIS_PHASE(psitarLexer)
 *  - 
 void
      psitarLexer->TO(psitarLexer)
 *  - 
 void
      psitarLexer->UNTIL(psitarLexer)
 *  - 
 void
      psitarLexer->WAIT(psitarLexer)
 *  - 
 void
      psitarLexer->WHILE(psitarLexer)
 *  - 
 void
      psitarLexer->WIDTH(psitarLexer)
 *  - 
 void
      psitarLexer->T__70(psitarLexer)
 *  - 
 void
      psitarLexer->T__71(psitarLexer)
 *  - 
 void
      psitarLexer->T__72(psitarLexer)
 *  - 
 void
      psitarLexer->T__73(psitarLexer)
 *  - 
 void
      psitarLexer->T__74(psitarLexer)
 *  - 
 void
      psitarLexer->T__75(psitarLexer)
 *  - 
 void
      psitarLexer->T__76(psitarLexer)
 *  - 
 void
      psitarLexer->T__77(psitarLexer)
 *  - 
 void
      psitarLexer->T__78(psitarLexer)
 *  - 
 void
      psitarLexer->T__79(psitarLexer)
 *  - 
 void
      psitarLexer->T__80(psitarLexer)
 *  - 
 void
      psitarLexer->T__81(psitarLexer)
 *  - 
 void
      psitarLexer->T__82(psitarLexer)
 *  - 
 void
      psitarLexer->T__83(psitarLexer)
 *  - 
 void
      psitarLexer->T__84(psitarLexer)
 *  - 
 void
      psitarLexer->CODE_BLOCK(psitarLexer)
 *  - 
 void
      psitarLexer->BOOL(psitarLexer)
 *  - 
 void
      psitarLexer->INTEGER(psitarLexer)
 *  - 
 void
      psitarLexer->STRING(psitarLexer)
 *  - 
 void
      psitarLexer->CHAR(psitarLexer)
 *  - 
 void
      psitarLexer->IDENTIFIER(psitarLexer)
 *  - 
 void
      psitarLexer->WS(psitarLexer)
 *  - 
 void
      psitarLexer->COMMENT(psitarLexer)
 *  - 
 void
      psitarLexer->HEX_DIGIT(psitarLexer)
 *  - 
 void
      psitarLexer->ESC_SEQ(psitarLexer)
 *  - 
 void
      psitarLexer->OCTAL_ESC(psitarLexer)
 *  - 
 void
      psitarLexer->UNICODE_ESC(psitarLexer)
 *  - 
 void
      psitarLexer->Tokens(psitarLexer)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_sitarLexer_H
#define _sitarLexer_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */

#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct sitarLexer_Ctx_struct sitarLexer, * psitarLexer;



#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/** Context tracking structure for 
sitarLexer

 */
struct sitarLexer_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_LEXER    pLexer;

     void
     (*mAND)	(struct sitarLexer_Ctx_struct * ctx);

     void
     (*mBEGIN)	(struct sitarLexer_Ctx_struct * ctx);

     void
     (*mBEHAVIOR)	(struct sitarLexer_Ctx_struct * ctx);

     void
     (*mCAPACITY)	(struct sitarLexer_Ctx_struct * ctx);

     void
     (*mCODE)	(struct sitarLexer_Ctx_struct * ctx);

     void
     (*mCOLON)	(struct sitarLexer_Ctx_struct * ctx);

     void
     (*mCONNECT_LEFT)	(struct sitarLexer_Ctx_struct * ctx);

     void
     (*mCONNECT_RIGHT)	(struct sitarLexer_Ctx_struct * ctx);

     void
     (*mDECL)	(struct sitarLexer_Ctx_struct * ctx);

     void
     (*mDO)	(struct sitarLexer_Ctx_struct * ctx);

     void
     (*mDOT)	(struct sitarLexer_Ctx_struct * ctx);

     void
     (*mELSE)	(struct sitarLexer_Ctx_struct * ctx);

     void
     (*mEND)	(struct sitarLexer_Ctx_struct * ctx);

     void
     (*mEQUALS)	(struct sitarLexer_Ctx_struct * ctx);

     void
     (*mEXPR)	(struct sitarLexer_Ctx_struct * ctx);

     void
     (*mFOR)	(struct sitarLexer_Ctx_struct * ctx);

     void
     (*mIF)	(struct sitarLexer_Ctx_struct * ctx);

     void
     (*mIN)	(struct sitarLexer_Ctx_struct * ctx);

     void
     (*mINCLUDE)	(struct sitarLexer_Ctx_struct * ctx);

     void
     (*mINIT)	(struct sitarLexer_Ctx_struct * ctx);

     void
     (*mINPORT)	(struct sitarLexer_Ctx_struct * ctx);

     void
     (*mINPORT_ARRAY)	(struct sitarLexer_Ctx_struct * ctx);

     void
     (*mKEYWORD_BOOL)	(struct sitarLexer_Ctx_struct * ctx);

     void
     (*mKEYWORD_CHAR)	(struct sitarLexer_Ctx_struct * ctx);

     void
     (*mKEYWORD_INT)	(struct sitarLexer_Ctx_struct * ctx);

     void
     (*mLOG)	(struct sitarLexer_Ctx_struct * ctx);

     void
     (*mMINUS)	(struct sitarLexer_Ctx_struct * ctx);

     void
     (*mMODULE)	(struct sitarLexer_Ctx_struct * ctx);

     void
     (*mNET)	(struct sitarLexer_Ctx_struct * ctx);

     void
     (*mNET_ARRAY)	(struct sitarLexer_Ctx_struct * ctx);

     void
     (*mNOT)	(struct sitarLexer_Ctx_struct * ctx);

     void
     (*mNOTHING)	(struct sitarLexer_Ctx_struct * ctx);

     void
     (*mOR)	(struct sitarLexer_Ctx_struct * ctx);

     void
     (*mOUTPORT)	(struct sitarLexer_Ctx_struct * ctx);

     void
     (*mOUTPORT_ARRAY)	(struct sitarLexer_Ctx_struct * ctx);

     void
     (*mPARAMETER)	(struct sitarLexer_Ctx_struct * ctx);

     void
     (*mPLUS)	(struct sitarLexer_Ctx_struct * ctx);

     void
     (*mPOINTER)	(struct sitarLexer_Ctx_struct * ctx);

     void
     (*mPROCEDURE)	(struct sitarLexer_Ctx_struct * ctx);

     void
     (*mRUN)	(struct sitarLexer_Ctx_struct * ctx);

     void
     (*mSCOPE)	(struct sitarLexer_Ctx_struct * ctx);

     void
     (*mSEND)	(struct sitarLexer_Ctx_struct * ctx);

     void
     (*mSIMULATION)	(struct sitarLexer_Ctx_struct * ctx);

     void
     (*mSTOP)	(struct sitarLexer_Ctx_struct * ctx);

     void
     (*mSUBMODULE)	(struct sitarLexer_Ctx_struct * ctx);

     void
     (*mSUBMODULE_ARRAY)	(struct sitarLexer_Ctx_struct * ctx);

     void
     (*mTHEN)	(struct sitarLexer_Ctx_struct * ctx);

     void
     (*mTHIS_CYCLE)	(struct sitarLexer_Ctx_struct * ctx);

     void
     (*mTHIS_PHASE)	(struct sitarLexer_Ctx_struct * ctx);

     void
     (*mTO)	(struct sitarLexer_Ctx_struct * ctx);

     void
     (*mUNTIL)	(struct sitarLexer_Ctx_struct * ctx);

     void
     (*mWAIT)	(struct sitarLexer_Ctx_struct * ctx);

     void
     (*mWHILE)	(struct sitarLexer_Ctx_struct * ctx);

     void
     (*mWIDTH)	(struct sitarLexer_Ctx_struct * ctx);

     void
     (*mT__70)	(struct sitarLexer_Ctx_struct * ctx);

     void
     (*mT__71)	(struct sitarLexer_Ctx_struct * ctx);

     void
     (*mT__72)	(struct sitarLexer_Ctx_struct * ctx);

     void
     (*mT__73)	(struct sitarLexer_Ctx_struct * ctx);

     void
     (*mT__74)	(struct sitarLexer_Ctx_struct * ctx);

     void
     (*mT__75)	(struct sitarLexer_Ctx_struct * ctx);

     void
     (*mT__76)	(struct sitarLexer_Ctx_struct * ctx);

     void
     (*mT__77)	(struct sitarLexer_Ctx_struct * ctx);

     void
     (*mT__78)	(struct sitarLexer_Ctx_struct * ctx);

     void
     (*mT__79)	(struct sitarLexer_Ctx_struct * ctx);

     void
     (*mT__80)	(struct sitarLexer_Ctx_struct * ctx);

     void
     (*mT__81)	(struct sitarLexer_Ctx_struct * ctx);

     void
     (*mT__82)	(struct sitarLexer_Ctx_struct * ctx);

     void
     (*mT__83)	(struct sitarLexer_Ctx_struct * ctx);

     void
     (*mT__84)	(struct sitarLexer_Ctx_struct * ctx);

     void
     (*mCODE_BLOCK)	(struct sitarLexer_Ctx_struct * ctx);

     void
     (*mBOOL)	(struct sitarLexer_Ctx_struct * ctx);

     void
     (*mINTEGER)	(struct sitarLexer_Ctx_struct * ctx);

     void
     (*mSTRING)	(struct sitarLexer_Ctx_struct * ctx);

     void
     (*mCHAR)	(struct sitarLexer_Ctx_struct * ctx);

     void
     (*mIDENTIFIER)	(struct sitarLexer_Ctx_struct * ctx);

     void
     (*mWS)	(struct sitarLexer_Ctx_struct * ctx);

     void
     (*mCOMMENT)	(struct sitarLexer_Ctx_struct * ctx);

     void
     (*mHEX_DIGIT)	(struct sitarLexer_Ctx_struct * ctx);

     void
     (*mESC_SEQ)	(struct sitarLexer_Ctx_struct * ctx);

     void
     (*mOCTAL_ESC)	(struct sitarLexer_Ctx_struct * ctx);

     void
     (*mUNICODE_ESC)	(struct sitarLexer_Ctx_struct * ctx);

     void
     (*mTokens)	(struct sitarLexer_Ctx_struct * ctx);
    const char * (*getGrammarFileName)();
    void            (*reset)  (struct sitarLexer_Ctx_struct * ctx);
    void	    (*free)   (struct sitarLexer_Ctx_struct * ctx);
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API psitarLexer sitarLexerNew         (
pANTLR3_INPUT_STREAM
 instream);
ANTLR3_API psitarLexer sitarLexerNewSSD      (
pANTLR3_INPUT_STREAM
 instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the 
lexer
 will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif
#define EOF      -1
#define T__70      70
#define T__71      71
#define T__72      72
#define T__73      73
#define T__74      74
#define T__75      75
#define T__76      76
#define T__77      77
#define T__78      78
#define T__79      79
#define T__80      80
#define T__81      81
#define T__82      82
#define T__83      83
#define T__84      84
#define AND      4
#define BEGIN      5
#define BEHAVIOR      6
#define BOOL      7
#define CAPACITY      8
#define CHAR      9
#define CODE      10
#define CODE_BLOCK      11
#define COLON      12
#define COMMENT      13
#define CONNECT_LEFT      14
#define CONNECT_RIGHT      15
#define DECL      16
#define DO      17
#define DOT      18
#define ELSE      19
#define END      20
#define EQUALS      21
#define ESC_SEQ      22
#define EXPR      23
#define FOR      24
#define HEX_DIGIT      25
#define IDENTIFIER      26
#define IF      27
#define IN      28
#define INCLUDE      29
#define INIT      30
#define INPORT      31
#define INPORT_ARRAY      32
#define INTEGER      33
#define KEYWORD_BOOL      34
#define KEYWORD_CHAR      35
#define KEYWORD_INT      36
#define LOG      37
#define MINUS      38
#define MODULE      39
#define NET      40
#define NET_ARRAY      41
#define NOT      42
#define NOTHING      43
#define OCTAL_ESC      44
#define OR      45
#define OUTPORT      46
#define OUTPORT_ARRAY      47
#define PARAMETER      48
#define PLUS      49
#define POINTER      50
#define PROCEDURE      51
#define RUN      52
#define SCOPE      53
#define SEND      54
#define SIMULATION      55
#define STOP      56
#define STRING      57
#define SUBMODULE      58
#define SUBMODULE_ARRAY      59
#define THEN      60
#define THIS_CYCLE      61
#define THIS_PHASE      62
#define TO      63
#define UNICODE_ESC      64
#define UNTIL      65
#define WAIT      66
#define WHILE      67
#define WIDTH      68
#define WS      69
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for sitarLexer
 * =============================================================================
 */
/** } */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
