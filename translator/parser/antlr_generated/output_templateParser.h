/** \file
 *  This C header file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : /home/nehak/Desktop/sitarV2.0/translator/grammar/output_template.g
 *     -                            On : 2015-02-05 16:22:03
 *     -                for the parser : output_templateParserParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The parser 
output_templateParser

has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 *
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef poutput_templateParser, which is returned from a call to output_templateParserNew().
 *
 * The methods in poutput_templateParser are  as follows:
 *
 *  - 
 void
      poutput_templateParser->top(poutput_templateParser)
 *  - 
 void
      poutput_templateParser->statement(poutput_templateParser)
 *  - 
 void
      poutput_templateParser->conditional(poutput_templateParser)
 *  - 
 void
      poutput_templateParser->action(poutput_templateParser)
 *  - 
 void
      poutput_templateParser->attribute(poutput_templateParser)
 *  - 
 void
      poutput_templateParser->plaintext(poutput_templateParser)
 *  - 
 void
      poutput_templateParser->esc_brackets(poutput_templateParser)
 *  - 
 output_templateParser_simple_text_return
      poutput_templateParser->simple_text(poutput_templateParser)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_output_templateParser_H
#define _output_templateParser_H

#include<iostream>
#include<map>
#include<list>
#include<set>
#include<string>
#include<sstream>
#include<fstream>
#include<cassert>
#include "GlobalData.h" //Data structure written to by parser, and read by code generator
 
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */


#define GDATA  (CTX->_globalData)
#define OUTFILE (*(SCOPE_TOP(top))->outfile)


//Files into which the main parser has dumped sections of code
#define C_file (CTX->_globalData->C_file) //Constructor
#define D_file (CTX->_globalData->D_file) //Declarations
#define E_file (CTX->_globalData->E_file) //Function to execute controlFlow
#define I_file  (CTX->_globalData->I_file)//Includes section


#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct output_templateParser_Ctx_struct output_templateParser, * poutput_templateParser;



#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif
typedef struct output_templateParser_simple_text_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
}
    output_templateParser_simple_text_return;




/* ruleAttributeScopeDecl(scope)
 */
/* makeScopeSet()
 */
 /** Definition of the top scope variable tracking
 *  structure. An instance of this structure is created by calling
 *  output_templateParser_topPush().
 */
typedef struct  output_templateParser_top_SCOPE_struct
{
    /** Function that the user may provide to be called when the
     *  scope is destroyed (so you can free pANTLR3_HASH_TABLES and so on)
     *
     * \param POinter to an instance of this typedef/struct
     */
    void    (ANTLR3_CDECL *free)	(struct output_templateParser_top_SCOPE_struct * frame);

    /* =============================================================================
     * Programmer defined variables...
     */
    std::ofstream * outfile;
    std::ofstream* h_file;
    std::ofstream* cpp_file;

    /* End of programmer defined variables
     * =============================================================================
     */
}
    output_templateParser_top_SCOPE, * poutput_templateParser_top_SCOPE;


/** Context tracking structure for 
output_templateParser

 */
struct output_templateParser_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_PARSER   pParser;
    /* ruleAttributeScopeDef(scope)
     */
    /** Pointer to the  top stack for use by poutput_templateParser_topPush()
     *  and poutput_templateParser_topPop()
     */
    pANTLR3_STACK poutput_templateParser_topStack;
    ANTLR3_UINT32 poutput_templateParser_topStack_limit;
    poutput_templateParser_top_SCOPE   (*poutput_templateParser_topPush)(struct output_templateParser_Ctx_struct * ctx);
    poutput_templateParser_top_SCOPE   poutput_templateParser_topTop;




     void
     (*top)	(struct output_templateParser_Ctx_struct * ctx);

     void
     (*statement)	(struct output_templateParser_Ctx_struct * ctx, bool X);

     void
     (*conditional)	(struct output_templateParser_Ctx_struct * ctx, bool X);

     void
     (*action)	(struct output_templateParser_Ctx_struct * ctx, bool X);

     void
     (*attribute)	(struct output_templateParser_Ctx_struct * ctx, bool X);

     void
     (*plaintext)	(struct output_templateParser_Ctx_struct * ctx, bool X);

     void
     (*esc_brackets)	(struct output_templateParser_Ctx_struct * ctx, bool X);

     output_templateParser_simple_text_return
     (*simple_text)	(struct output_templateParser_Ctx_struct * ctx, bool X);
    // Delegated rules

    const char * (*getGrammarFileName)();
    void            (*reset)  (struct output_templateParser_Ctx_struct * ctx);
    void	    (*free)   (struct output_templateParser_Ctx_struct * ctx);

    // A pointer to the global data structure
    //The parser fills in data into a global data structure, which is then read
    //by the code generator. We need to point out this global data structure to this parser.
    GlobalData* _globalData;
    void setGlobalDataPtr(GlobalData* global_data){_globalData=global_data;};

};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API poutput_templateParser output_templateParserNew         (
pANTLR3_COMMON_TOKEN_STREAM
 instream);
ANTLR3_API poutput_templateParser output_templateParserNewSSD      (
pANTLR3_COMMON_TOKEN_STREAM
 instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the 
parser
 will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif
#define EOF      -1
#define AT      4
#define ESC_LBR      5
#define ESC_RBR      6
#define IDENT      7
#define LBR      8
#define LPAREN      9
#define NOT1      10
#define PLAINTEXT      11
#define RBR      12
#define RPAREN      13
#define SLASH      14
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for output_templateParser
 * =============================================================================
 */
/** } */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
