{
  "name": "Sitar",
  "tagline": "A framework for modelling cycle-based systems",
  "body": "<p style=\"text-align: center;\"> \r\nSitar is a tool for modeling and simulation of cycle-based systems.\r\nIt consists of a system description language and a lightweight simulation kernel.  \r\nA system can be described as a set of concurrent, interconnected modules\r\noperating on a global clock.  The language supports hierarchical\r\ndescriptions: modules can contain instances of other modules.\r\nThe behavior of each module can be described in an imperative manner as a\r\nsequence of statements.  The language supports constructs such as :\r\n</p>\r\n* Time delays\r\n* Parallel blocks\r\n* Branch/loop constructs\r\n* Procedures and\r\n* Code blocks (instantaneous)\r\n\r\n<p style=\"text-align: center;\"> \r\nIn addition, C++ code can be embedded into a module description \r\nin a straightforward and well-defined manner.\r\nEach module description gets translated to a C++ class. The generated code can\r\nbe compiled and linked together with the simulation kernel to get a single\r\nsimulation executable. The simulation kernel consists of a\r\nsmall set of C++ classes, and supports parallel execution using OpenMP. \r\nThe simulation algorithm uses two-phase execution : each clock cycle\r\nis divided into two phases, and input/output events are\r\nrestricted to separate phases, leading to a race-free execution.\r\n</p>\r\n\r\nSitar can be used for modeling discrete-event systems such as \r\ncomputer-architectural models, communication \r\nnetworks and discrete-time queues. \r\n(Written for Linux)",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}